{"version":3,"sources":["cards/secondCardGame/NewList.module.css","images/1.png","images/2.png","cards/StartGame.tsx","cards/firstCardGame/MultipleComponent.tsx","cards/firstCardGame/QuestionCard.tsx","cards/firstCardGame/QuestionsList.tsx","cards/firstCardGame/CardContainer.tsx","cards/secondCardGame/Timer.tsx","cards/secondCardGame/Questions.tsx","cards/secondCardGame/CheckCards.tsx","App.tsx","reportWebVitals.js","index.tsx","cards/firstCardGame/QuestionList.module.css","cards/firstCardGame/QuestionCard.module.css","cards/StartGame.module.css"],"names":["module","exports","StartGame","changeGame","className","style","startContainer","id","blink","choiceContainer","firstGame","onClick","src","game1","alt","secondGame","game2","MultipleComponent","card","question","answer","options","answers","image","useState","height","setHeight","turn","setTurn","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","resultHeight","Math","max","useEffect","window","addEventListener","removeEventListener","turnCard","front","ref","titleQ","dangerouslySetInnerHTML","__html","width","cardOptions","map","option","index","cardOption","Date","now","back","QuestionCard","QuestionsList","questionsCards","cardListContainer","CardContainer","treeData","questions","setQuestions","categories","setCategories","categoryEl","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","allAnswers","sort","random","cardBox","header","onSubmit","e","preventDefault","amountElement","categoryElement","params","amount","category","results","questionItem","correct_answer","incorrect_answers","a","formGroup","htmlFor","name","type","min","step","defaultValue","btn","btnHome","container","Timer","handleFinishGame","startGame","isActive","second","setSecond","intervalId","setInterval","clearInterval","Questions","lengthArray","currentIndex","handleNextQuestion","showAnswers","handleAnswer","box","timeBlock","answerContainer","ans","trueColor","colorWin","colorLose","blockBtnNext","btnNext","CheckCards","setCurrentIndex","score","setScore","setShowAnswers","setIsActive","finishGame","setFinishGame","length","winBlock","winTitle","fileJSON","App","startFirstGame","setStartFirstGame","startSecondGame","setStartSecondGame","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dc4302a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewList_container__3Ktft\",\"box\":\"NewList_box__2v4FB\",\"timeBlock\":\"NewList_timeBlock__2U2La\",\"titleQ\":\"NewList_titleQ__13vsS\",\"answerContainer\":\"NewList_answerContainer__1Poct\",\"answers\":\"NewList_answers__2WZMX\",\"answer\":\"NewList_answer__3smYG\",\"colorWin\":\"NewList_colorWin__1yNZB\",\"colorLose\":\"NewList_colorLose__22gaW\",\"blockBtnNext\":\"NewList_blockBtnNext__2u0x7\",\"btnNext\":\"NewList_btnNext__2CHwM\",\"btnHome\":\"NewList_btnHome__M2SuH\",\"winBlock\":\"NewList_winBlock__3Gdj-\",\"winTitle\":\"NewList_winTitle__CKHsu\",\"winButton\":\"NewList_winButton__3W4Fi\"};","export default __webpack_public_path__ + \"static/media/1.e8945e31.png\";","export default __webpack_public_path__ + \"static/media/2.3636cf32.png\";","import React from 'react';\r\nimport style from \"./StartGame.module.css\"\r\nimport game1 from '../images/1.png'\r\nimport game2 from '../images/2.png'\r\n\r\ntype StartType = {\r\n    changeGame: (e:number)=>void\r\n}\r\n\r\n\r\nconst StartGame: React.FC<StartType> = ({changeGame}) => {\r\n\r\n    return (\r\n        <div className={style.startContainer}>\r\n            <h1 id={style.blink}>Choice type card game</h1>\r\n            <div className={style.choiceContainer}>\r\n                <div className={style.firstGame}\r\n                     onClick={()=>changeGame(1)}>\r\n                    <img  src={game1} alt=\"game1\"/>\r\n                </div>\r\n                <div className={style.secondGame}\r\n                     onClick={()=>changeGame(2)}>\r\n                    <img  src={game2} alt=\"game2\"/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartGame;","import React, {useEffect, useRef, useState} from 'react';\r\nimport style from \"./QuestionCard.module.css\";\r\nimport {cardType} from \"../../types/TypesContainer\";\r\n\r\ntype QuestionCardTypes = {\r\n    card: cardType\r\n}\r\nconst MultipleComponent: React.FC<QuestionCardTypes> = ({card: {question, answer, options, answers, image}}) => {\r\n    const [height, setHeight] = useState(0)\r\n    const [turn, setTurn] = useState(false)\r\n    const flip = () => {\r\n        setTurn(!turn)\r\n    }\r\n    debugger\r\n    const frontEl = useRef() as React.MutableRefObject<HTMLInputElement>\r\n    const backEl = useRef() as React.MutableRefObject<HTMLInputElement>\r\n\r\n    function setMaxHeight() {\r\n        const frontHeight = frontEl.current.getBoundingClientRect().height\r\n        const backHeight = backEl.current.getBoundingClientRect().height\r\n        const resultHeight = Math.max(frontHeight, backHeight, 200)\r\n        setHeight(resultHeight)\r\n    }\r\n\r\n    useEffect(setMaxHeight, [question, answer, answers, image])\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", setMaxHeight)\r\n        return () => window.removeEventListener(\"resize\", setMaxHeight)\r\n    }, [])\r\n    return (\r\n        <div className={`${style.card} ${turn ? style.turnCard : ''}`}\r\n             style={{height}}\r\n             onClick={flip}\r\n        >\r\n            <div className={style.front}\r\n                 ref={frontEl}>\r\n                <div\r\n                    className={style.titleQ}\r\n                    dangerouslySetInnerHTML={{__html: question}}\r\n                />\r\n                {image && <img width=\"100%\" height=\"89\" alt=\"\" src={image}/>}\r\n                <div className={style.cardOptions}>\r\n                    {!answers\r\n                        ? options.map((option, index) => {\r\n                            return <div key={`${index}-${Date.now()}`}\r\n                                        className={style.cardOption}>{option}</div>\r\n                        })\r\n                        : answers.map((option, index) => {\r\n                            return <div key={`${index}-${Date.now()}`}\r\n                                        className={style.cardOption}>{option}</div>\r\n                        })}\r\n                </div>\r\n\r\n            </div>\r\n            <div className={style.back}\r\n                 ref={backEl}>\r\n                {answer}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MultipleComponent;","import React from 'react';\r\nimport {cardType} from \"../../types/TypesContainer\";\r\nimport MultipleComponent from \"./MultipleComponent\";\r\n\r\ntype QuestionCardTypes = {\r\n    card: cardType\r\n}\r\n\r\nconst QuestionCard: React.FC<QuestionCardTypes> = ({card}) => {\r\n    return <MultipleComponent card={card}/>;\r\n};\r\n\r\nexport default QuestionCard;","import React from 'react';\r\nimport style from \"./QuestionList.module.css\"\r\nimport {cardsType} from \"../../types/TypesContainer\";\r\nimport QuestionCard from \"./QuestionCard\";\r\n\r\ntype QuestionsListTypes = {\r\n    questionsCards: Array<cardsType>\r\n}\r\nconst QuestionsList: React.FC<QuestionsListTypes> = ({questionsCards}) => {\r\n    return (\r\n        <div className={style.cardListContainer}>\r\n            {questionsCards.map((card, index) => {\r\n                return <QuestionCard card={card} key={`${index} + ${Date.now()}`}/>\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionsList;","import React, {useEffect, useRef, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport style from \"./QuestionList.module.css\"\r\nimport {cardType, categoryType, questionItemType} from \"../../types/TypesContainer\";\r\nimport QuestionsList from \"./QuestionsList\";\r\n\r\ntype CardContainerTypes = {\r\n    treeData: Array<cardType>\r\n    changeGame: (e: number) => void\r\n}\r\n\r\nconst CardContainer: React.FC<CardContainerTypes> = (\r\n    {treeData, changeGame}) => {\r\n    const [questions, setQuestions] = useState(treeData);\r\n    const [categories, setCategories] = useState([])\r\n    const categoryEl = useRef<HTMLSelectElement>(null)\r\n    const amountEl = useRef<HTMLInputElement>(null)\r\n    useEffect(() => {\r\n        axios\r\n            .get('https://opentdb.com/api_category.php')\r\n            .then(res => {\r\n                setCategories(res.data.trivia_categories)\r\n            })\r\n        const allAnswers = treeData.map((question) => ({\r\n            ...question,\r\n            answers: [\r\n                question.answer,\r\n                ...question.options\r\n            ].sort(() => Math.random() - 0.5)\r\n        }))\r\n        setQuestions(allAnswers);\r\n    }, [])\r\n\r\n    function decodeString(str: string) {\r\n        const textArea = document.createElement('textarea')\r\n        textArea.innerHTML = str\r\n        return textArea.value\r\n    }\r\n\r\n\r\n    function handleSubmit(e: React.FormEvent<EventTarget>) {\r\n        e.preventDefault()\r\n        const amountElement = amountEl.current;\r\n        const categoryElement = categoryEl.current;\r\n        axios\r\n            .get('https://opentdb.com/api.php', {\r\n                params: {\r\n                    amount: amountElement && amountElement.value,\r\n                    category: categoryElement && categoryElement.value\r\n                }\r\n            })\r\n            .then(res => {\r\n                setQuestions(res.data.results.map((questionItem: questionItemType, index: string) => {\r\n                    const answer = decodeString(questionItem.correct_answer);\r\n                    const questions = decodeString(questionItem.question)\r\n                    const options = [...questionItem.incorrect_answers.map(\r\n                        (a: string) => decodeString(a)), answer]\r\n                    return {\r\n                        id: `${index}-${Date.now()}`,\r\n                        question: questions,\r\n                        answer: answer,\r\n                        options: options.sort(() => Math.random() - .5)\r\n                    }\r\n                }))\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={style.cardBox}>\r\n            <form className={style.header} onSubmit={handleSubmit}>\r\n                <div className={style.formGroup}>\r\n                    <label htmlFor=\"category\">Category</label>\r\n                    <select name=\"\" id=\"category\" ref={categoryEl}>\r\n                        {categories.map((category: categoryType) => {\r\n                            return <option value={category.id} key={category.id}>\r\n                                {category.name}\r\n                            </option>\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className={style.formGroup}>\r\n                    <label htmlFor=\"amount\">Number Of Questions</label>\r\n                    <input type=\"number\" id=\"amount\" min='1' step='1'\r\n                           defaultValue={10} ref={amountEl}/>\r\n                </div>\r\n                <div className={style.formGroup}>\r\n                    <button className={style.btn}>Generate</button>\r\n                </div>\r\n                <div className={style.formGroup}>\r\n                    <button className={style.btnHome} onClick={() => changeGame(3)}>HOME</button>\r\n                </div>\r\n            </form>\r\n            <div className={style.container}>\r\n                <QuestionsList questionsCards={questions}/>\r\n            </div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardContainer;","import React, {useEffect, useState} from 'react';\r\n\r\ntype TimerTypes = {\r\n    startGame: () => void\r\n    handleFinishGame: () => void\r\n    isActive: boolean\r\n}\r\n\r\nconst Timer: React.FC<TimerTypes> = ({handleFinishGame,startGame, isActive}) => {\r\n    let [second, setSecond] = useState(15);\r\n    useEffect(() => {\r\n        let intervalId = 0;\r\n\r\n        if (isActive) {\r\n            intervalId = window.setInterval(() => {\r\n                if (second === 0) {\r\n                    startGame()\r\n                    handleFinishGame()\r\n                } else {\r\n                    let current = --second\r\n                if (current < 10) {\r\n                     // current = `0${current}`\r\n                }\r\n                    setSecond(current)\r\n            }\r\n            }, 1000)\r\n        }\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [isActive, second])\r\n    return (\r\n        <div>\r\n            <span className=\"second\">{second}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Timer;","import React from 'react';\r\nimport style from \"./NewList.module.css\";\r\nimport {cardType} from \"../../types/TypesContainer\";\r\nimport Timer from \"./Timer\";\r\n\r\ntype QuestionTypes = {\r\n    questions: cardType\r\n    handleNextQuestion: () => void\r\n    showAnswers: boolean\r\n    handleAnswer: (ans: string) => void\r\n    changeGame: (e: number) => void\r\n    startGame: () => void\r\n    handleFinishGame: () => void\r\n    isActive: boolean\r\n    currentIndex: number\r\n    lengthArray: number\r\n}\r\n\r\nconst Questions: React.FC<QuestionTypes> = ({\r\n                                                lengthArray,\r\n                                                currentIndex,\r\n                                                handleFinishGame,\r\n                                                isActive, startGame,\r\n                                                changeGame,\r\n                                                handleNextQuestion,\r\n                                                showAnswers,\r\n                                                handleAnswer,\r\n                                                questions: {question, answer, answers, image}\r\n                                            }) => {\r\n    return (\r\n        <div className={style.box}>\r\n            <span className={style.timeBlock}>\r\n                <div>Question {currentIndex}/{lengthArray}</div>\r\n                <Timer handleFinishGame={handleFinishGame} startGame={startGame}\r\n                       isActive={isActive}/>\r\n            </span>\r\n            <div className={style.titleQ}>\r\n                <h2 dangerouslySetInnerHTML={{__html: question}}/>\r\n                {image && <img width=\"220px\" height=\"89\" alt=\"\" src={image}/>}\r\n            </div>\r\n            <div className={style.answerContainer}>\r\n                <div className={style.answers}>{answers?.map((ans, index) => {\r\n                    const trueColor = showAnswers\r\n                        ? ans === answer\r\n                            ? `${style.colorWin}`\r\n                            : `${style.colorLose}` : ''\r\n                    return (\r\n                        <button key={`${index} + ${Date.now()}`}\r\n                                onClick={() => handleAnswer(ans)}\r\n                                className={`${style.answer} ${trueColor}`}\r\n                                dangerouslySetInnerHTML={{__html: ans}}/>\r\n                    )\r\n                })}</div>\r\n                <div className={style.blockBtnNext}>\r\n                    {showAnswers &&\r\n                    <button className={style.btnNext} onClick={handleNextQuestion}>Next</button>}\r\n                    <button className={style.btnHome} onClick={() => changeGame(3)}>HOME</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Questions;","import React, {useEffect, useState} from 'react';\r\nimport {cardType} from \"../../types/TypesContainer\";\r\nimport style from \"./NewList.module.css\";\r\nimport Questions from \"./Questions\";\r\n\r\ntype CardContainerTypes = {\r\n    treeData: Array<cardType>\r\n    changeGame: (e: number) => void\r\n}\r\nconst CheckCards: React.FC<CardContainerTypes> = (\r\n    {treeData, changeGame}) => {\r\n\r\n    const [questions, setQuestions] = useState(treeData);\r\n    const [currentIndex, setCurrentIndex] = useState(0)\r\n    const [score, setScore] = useState(0)\r\n    const [showAnswers, setShowAnswers] = useState(false)\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [finishGame, setFinishGame] = useState(false)\r\n\r\n    const startGame = () => {\r\n        setIsActive(!isActive)\r\n    }\r\n    useEffect(() => {\r\n        setIsActive(true)\r\n        const allAnswers = treeData.map((question) => ({\r\n            ...question,\r\n            answers: [\r\n                question.answer,\r\n                ...question.options\r\n            ].sort(() => Math.random() - 0.5)\r\n        }))\r\n        setQuestions(allAnswers);\r\n    }, [])\r\n\r\n    const handleNextQuestion = () => {\r\n        setCurrentIndex(currentIndex + 1)\r\n        setShowAnswers(false)\r\n    }\r\n    const handleAnswer = (answer: string) => {\r\n        if (!showAnswers) {\r\n            if (answer === questions[currentIndex].answer) {\r\n                setScore(score + 1)\r\n            }\r\n        }\r\n        setShowAnswers(true)\r\n    }\r\n\r\n    const handleFinishGame = () => {\r\n        setFinishGame(!finishGame)\r\n    }\r\n    const lengthArray = questions.length\r\n    return lengthArray > 0\r\n        ? (\r\n            <div className={style.container}>\r\n                {currentIndex >= questions.length || finishGame\r\n                    ? (\r\n                        <div className={style.winBlock}>\r\n                            <h1 className={style.winTitle}>YOUR SCORE WAS {score}</h1>\r\n                            <button className={style.btnHome}\r\n                                    onClick={() => changeGame(3)}>HOME\r\n                            </button>\r\n                        </div>)\r\n                    : (\r\n                        <Questions handleFinishGame={handleFinishGame}\r\n                                   isActive={isActive}\r\n                                   startGame={startGame}\r\n                                   changeGame={changeGame}\r\n                                   handleNextQuestion={handleNextQuestion}\r\n                                   showAnswers={showAnswers}\r\n                                   questions={questions[currentIndex]}\r\n                                   handleAnswer={handleAnswer}\r\n                                   currentIndex={currentIndex}\r\n                                   lengthArray={lengthArray}\r\n                        />)}\r\n            </div>)\r\n        : <div>Loading...</div>\r\n};\r\n\r\nexport default CheckCards;","import './App.css';\nimport StartGame from \"./cards/StartGame\";\nimport React, {useState} from \"react\";\nimport CardContainer from \"./cards/firstCardGame/CardContainer\";\nimport fileJSON from \"./data.json\";\nimport CheckCards from \"./cards/secondCardGame/CheckCards\";\n\nconst treeData = fileJSON\n\n\nfunction App() {\n    const [startFirstGame, setStartFirstGame] = useState(false)\n    const [startSecondGame, setStartSecondGame] = useState(false)\n    const changeGame = (e: number) => {\n        e === 1 && setStartFirstGame(true)\n        e === 2 && setStartSecondGame(true)\n        e === 3 && setStartSecondGame(false)\n        e === 3 && setStartFirstGame(false)\n    }\n\n\n    return (\n        <div className=\"App\">\n            <header>\n            </header>\n            {startFirstGame\n                ? <CardContainer changeGame={changeGame} treeData={treeData}/>\n                : startSecondGame\n                    ? <CheckCards changeGame={changeGame} treeData={treeData}/>\n                    : <StartGame changeGame={changeGame}/>}\n\n            {/*//answer on the other side of the card*/}\n            {/*<CardContainer treeData={treeData}/>*/}\n            {/*//Choose the correct answer*/}\n            {/*<CheckCards treeData={treeData}/>*/}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardBox\":\"QuestionList_cardBox__16yG_\",\"header\":\"QuestionList_header__fZCXi\",\"formGroup\":\"QuestionList_formGroup___K4vr\",\"btn\":\"QuestionList_btn__XAo2H\",\"btnHome\":\"QuestionList_btnHome__9Pfu9\",\"container\":\"QuestionList_container__27Nf2\",\"cardListContainer\":\"QuestionList_cardListContainer__3HJLB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"QuestionCard_card__3JFjD\",\"turnCard\":\"QuestionCard_turnCard__3imOW\",\"front\":\"QuestionCard_front__2I20h\",\"back\":\"QuestionCard_back__2YLU5\",\"titleQ\":\"QuestionCard_titleQ__2CaUk\",\"imgSize\":\"QuestionCard_imgSize___KmaM\",\"answerField\":\"QuestionCard_answerField__q2v6-\",\"success\":\"QuestionCard_success__2rw7q\",\"cardOptions\":\"QuestionCard_cardOptions__1y47U\",\"cardOption\":\"QuestionCard_cardOption__78o4r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blink\":\"StartGame_blink__2e5ih\",\"startContainer\":\"StartGame_startContainer__2ivXo\",\"choiceContainer\":\"StartGame_choiceContainer__3Z5IL\",\"firstGame\":\"StartGame_firstGame__26YCJ\",\"firstGameTitle\":\"StartGame_firstGameTitle__1AGjO\",\"secondGame\":\"StartGame_secondGame__3K1KA\"};"],"sourceRoot":""}