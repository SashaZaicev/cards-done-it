{"version":3,"sources":["cards/QuestionList.module.css","cards/QuestionCard.module.css","cards/QuestionCard.tsx","cards/QuestionsList.tsx","cards/CardContainer.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["module","exports","QuestionCard","card","useState","turn","setTurn","height","setHeight","frontEl","useRef","backEl","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","resultHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","turnCard","onClick","front","ref","image","cardOptions","map","option","index","cardOption","Date","now","back","QuestionsList","questionsCards","cardListContainer","treeData","fileJSON","CardContainer","questions","setQuestions","categories","setCategories","categoryEl","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","header","onSubmit","e","preventDefault","amountElement","categoryElement","params","amount","category","results","questionItem","correct_answer","incorrect_answers","a","id","sort","random","formGroup","htmlFor","name","type","min","step","defaultValue","btn","container","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6df5656f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"QuestionList_header__3MT29\",\"formGroup\":\"QuestionList_formGroup__2Drdu\",\"btn\":\"QuestionList_btn__2WW7I\",\"container\":\"QuestionList_container__1h3qI\",\"cardListContainer\":\"QuestionList_cardListContainer__2_z1Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"QuestionCard_card__JE4bG\",\"turnCard\":\"QuestionCard_turnCard__pSCGa\",\"front\":\"QuestionCard_front__1Sfja\",\"back\":\"QuestionCard_back__3GXcm\",\"cardOptions\":\"QuestionCard_cardOptions__2ufAL\",\"cardOption\":\"QuestionCard_cardOption__3M02h\"};","import React, {useEffect, useRef, useState} from 'react';\r\nimport style from \"./QuestionCard.module.css\"\r\nimport {cardType} from \"../types/TypesContainer\";\r\n\r\ntype QuestionCardTypes = {\r\n    card: cardType\r\n}\r\n\r\nconst QuestionCard: React.FC<QuestionCardTypes> = ({card}) => {\r\n    const [turn, setTurn] = useState(false)\r\n    const [height, setHeight] = useState(0)\r\n    const flip = () => {\r\n        setTurn(!turn)\r\n    }\r\n    const frontEl = useRef() as React.MutableRefObject<HTMLInputElement>\r\n    const backEl = useRef() as React.MutableRefObject<HTMLInputElement>\r\n\r\n    function setMaxHeight() {\r\n        const frontHeight = frontEl.current.getBoundingClientRect().height\r\n        const backHeight = backEl.current.getBoundingClientRect().height\r\n        const resultHeight = Math.max(frontHeight, backHeight, 100)\r\n        setHeight(resultHeight)\r\n    }\r\n\r\n    useEffect(setMaxHeight, [card.question, card.answer, card.options])\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", setMaxHeight)\r\n        return () => window.removeEventListener(\"resize\", setMaxHeight)\r\n    }, [])\r\n\r\n    return (\r\n        <div className={`${style.card} ${turn ? style.turnCard : ''}`}\r\n             style={{height: height}}\r\n             onClick={flip}>\r\n            <div className={style.front} ref={frontEl}>\r\n                {!card.image ? <div>{card.question}\r\n                        <div>{card.image}</div>\r\n                    </div> :\r\n                    <div>{card.question}</div>}\r\n                <div className={style.cardOptions}>\r\n                    {card.options.map((option: string, index: string | number) => {\r\n                        return <div key={`${index}-${Date.now()}`}\r\n                                    className={style.cardOption}>{option}</div>\r\n                    })}\r\n                </div>\r\n\r\n            </div>\r\n            <div className={style.back}\r\n                 ref={backEl}>{card.answer}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionCard;","import React from 'react';\r\nimport style from \"./QuestionList.module.css\"\r\nimport {cardsType} from \"../types/TypesContainer\";\r\nimport QuestionCard from \"./QuestionCard\";\r\n\r\ntype QuestionsListTypes = {\r\n    questionsCards: Array<cardsType>\r\n}\r\nconst QuestionsList: React.FC<QuestionsListTypes> = ({questionsCards}) => {\r\n    return (\r\n        <div className={style.cardListContainer}>\r\n            {questionsCards.map((card) => {\r\n                return <QuestionCard card={card} key={`${card.question} + ${Date.now()}`}/>\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionsList;","import React, {useEffect, useRef, useState} from 'react';\r\nimport fileJSON from \"../data.json\";\r\nimport axios from \"axios\";\r\nimport style from \"./QuestionList.module.css\"\r\nimport {categoryType, questionItemType} from \"../types/TypesContainer\";\r\nimport QuestionsList from \"./QuestionsList\";\r\n\r\nconst treeData = fileJSON\r\nconst CardContainer = () => {\r\n\r\n    const [questions, setQuestions] = useState(treeData);\r\n    const [categories, setCategories] = useState([])\r\n    const categoryEl = useRef<HTMLSelectElement>(null)\r\n    const amountEl = useRef<HTMLInputElement>(null)\r\n    useEffect(() => {\r\n        axios\r\n            .get('https://opentdb.com/api_category.php')\r\n            .then(res => {\r\n                setCategories(res.data.trivia_categories)\r\n            })\r\n    }, [])\r\n\r\n    function decodeString(str: string) {\r\n        const textArea = document.createElement('textarea')\r\n        textArea.innerHTML = str\r\n        return textArea.value\r\n    }\r\n\r\n\r\n    function handleSubmit(e: React.FormEvent<EventTarget>) {\r\n        e.preventDefault()\r\n        const amountElement = amountEl.current;\r\n        const categoryElement = categoryEl.current;\r\n        axios\r\n            .get('https://opentdb.com/api.php', {\r\n                params: {\r\n                    amount: amountElement && amountElement.value,\r\n                    category: categoryElement && categoryElement.value\r\n                }\r\n            })\r\n            .then(res => {\r\n                setQuestions(res.data.results.map((questionItem: questionItemType, index: string) => {\r\n                    const answer = decodeString(questionItem.correct_answer);\r\n                    const questions = decodeString(questionItem.question)\r\n                    const options = [...questionItem.incorrect_answers.map(\r\n                        (a: string) => decodeString(a)), answer]\r\n                    return {\r\n                        id: `${index}-${Date.now()}`,\r\n                        question: questions,\r\n                        answer: answer,\r\n                        options: options.sort(() => Math.random() - .5)\r\n                    }\r\n                }))\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className={style.header} onSubmit={handleSubmit}>\r\n                <div className={style.formGroup}>\r\n                    <label htmlFor=\"category\">Category</label>\r\n                    <select name=\"\" id=\"category\" ref={categoryEl}>\r\n                        {categories.map((category: categoryType) => {\r\n                            return <option value={category.id} key={category.id}>\r\n                                {category.name}\r\n                            </option>\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className={style.formGroup}>\r\n                    <label htmlFor=\"amount\">Number Of Questions</label>\r\n                    <input type=\"number\" id=\"amount\" min='1' step='1'\r\n                           defaultValue={10} ref={amountEl}/>\r\n                </div>\r\n                <div className={style.formGroup}>\r\n                    <button className={style.btn}>Generate</button>\r\n                </div>\r\n            </form>\r\n            <div className={style.container}>\r\n                <QuestionsList questionsCards={questions}/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CardContainer;","import './App.css';\nimport CardContainer from \"./cards/CardContainer\";\nimport image from './images/question1.png'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header>\n            </header>\n            <CardContainer/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}